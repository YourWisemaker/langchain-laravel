name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php: [8.1, 8.2, 8.3]
        laravel: [10.*, 11.*]
        dependency-version: [prefer-lowest, prefer-stable]
        include:
          - laravel: 10.*
            testbench: 8.*
          - laravel: 11.*
            testbench: 9.*
        exclude:
          - php: 8.1
            laravel: 11.*
    
    name: PHP ${{ matrix.php }} - Laravel ${{ matrix.laravel }} - ${{ matrix.dependency-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
        coverage: xdebug
    
    - name: Setup problem matchers
      run: |
        echo "::add-matcher::${{ runner.tool_cache }}/php.json"
        echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
    
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install dependencies
      run: |
        composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-interaction --no-update
        composer update --${{ matrix.dependency-version }} --prefer-dist --no-interaction
    
    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
    
    - name: Run unit tests
      run: vendor/bin/phpunit --testsuite=Unit --coverage-clover=coverage-unit.xml
    
    - name: Run feature tests
      run: vendor/bin/phpunit --testsuite=Feature --coverage-clover=coverage-feature.xml
    
    - name: Run integration tests (with API key)
      if: env.OPENAI_API_KEY != ''
      run: vendor/bin/phpunit --testsuite=Integration --coverage-clover=coverage-integration.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run performance tests
      run: vendor/bin/phpunit --group=performance
    
    - name: Upload coverage reports to Codecov
      if: matrix.php == '8.2' && matrix.laravel == '10.*' && matrix.dependency-version == 'prefer-stable'
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-unit.xml,./coverage-feature.xml,./coverage-integration.xml
        fail_ci_if_error: false
        verbose: true

  code-quality:
    runs-on: ubuntu-latest
    
    name: Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
        coverage: none
    
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Run PHPStan
      run: composer analyse
    
    - name: Check code formatting
      run: composer format-check
    
    - name: Run security check
      run: composer audit

  documentation:
    runs-on: ubuntu-latest
    
    name: Documentation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
    
    - name: Validate documentation structure
      run: |
        # Check if all required documentation files exist
        required_files=(
          "README.md"
          "CHANGELOG.md"
          "CONTRIBUTING.md"
          "docs/installation.md"
          "docs/api.md"
          "docs/usage-guide.md"
          "docs/testing-guide.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing required documentation file: $file"
            exit 1
          fi
        done
        
        echo "All required documentation files are present"
    
    - name: Check example files
      run: |
        # Validate that example files are syntactically correct PHP
        find examples/ -name "*.php" -exec php -l {} \;

  security:
    runs-on: ubuntu-latest
    
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
        coverage: none
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Run security audit
      run: composer audit
    
    - name: Check for hardcoded secrets
      run: |
        DUMMY_KEYS_PATTERN='test-deepseek-key|test-openai-key|invalid-key-12345|test-api-key'
        SECRETS_FOUND=false

        # Check for sk- pattern
        if [ -n "$(grep -r "sk-" src/ tests/ examples/ --exclude-dir=vendor | grep -v -E "$DUMMY_KEYS_PATTERN")" ]; then
          echo "Potential hardcoded secrets found (sk- pattern)"
          SECRETS_FOUND=true
        fi

        # Check for api_key... pattern
        if [ -n "$(grep -r "api_key.*=.*['\"][a-zA-Z0-9]" src/ tests/ examples/ --exclude-dir=vendor | grep -v -E "$DUMMY_KEYS_PATTERN")" ]; then
          echo "Potential hardcoded secrets found (api_key pattern)"
          SECRETS_FOUND=true
        fi

        # Check for secret... pattern
        if [ -n "$(grep -r "secret.*=.*['\"][a-zA-Z0-9]" src/ tests/ examples/ --exclude-dir=vendor | grep -v -E "$DUMMY_KEYS_PATTERN")" ]; then
          echo "Potential hardcoded secrets found (secret pattern)"
          SECRETS_FOUND=true
        fi

        if [ "$SECRETS_FOUND" = true ]; then
          echo "Potential hardcoded secrets detected after filtering known dummy keys!"
          exit 1
        else
          echo "No hardcoded secrets detected after filtering known dummy keys."
        fi
    
    - name: Validate configuration security
      run: |
        # Check that sensitive configuration is properly handled
        php -r "
        \$config = include 'config/langchain.php';
        if (isset(\$config['openai']['api_key']) && !str_contains(\$config['openai']['api_key'], 'env(')) {
          echo 'API key should use env() function\n';
          exit(1);
        }
        echo 'Configuration security check passed\n';
        "

  compatibility:
    runs-on: ubuntu-latest
    
    name: Compatibility Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
        coverage: none
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Check PHP compatibility
      run: |
        # Check for PHP 8.1+ compatibility
        vendor/bin/phpstan analyse --level=max --configuration=phpstan.neon
    
    - name: Validate composer.json
      run: composer validate --strict
    
    - name: Check autoloading
      run: composer dump-autoload --optimize --strict-psr

  performance:
    runs-on: ubuntu-latest
    
    name: Performance Benchmarks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
        coverage: none
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction --optimize-autoloader
    
    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        vendor/bin/phpunit --group=performance --no-coverage --testdox
    
    - name: Memory usage check
      run: |
        php -d memory_limit=128M vendor/bin/phpunit --group=performance --no-coverage
        echo "Performance tests completed within memory limit"

  examples:
    runs-on: ubuntu-latest
    
    name: Validate Examples
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
        coverage: none
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Validate example syntax
      run: |
        echo "Checking PHP syntax in example files..."
        find examples/ -name "*.php" -exec php -l {} \;
        echo "All example files have valid PHP syntax"
    
    - name: Check example completeness
      run: |
        # Ensure examples have proper namespace and use statements
        for file in examples/*.php; do
          if ! grep -q "namespace" "$file" && ! grep -q "<?php" "$file"; then
            echo "Example file $file may be missing proper PHP opening tag or namespace"
            exit 1
          fi
        done
        echo "Example files structure validation passed"

  build-status:
    runs-on: ubuntu-latest
    needs: [test, code-quality, documentation, security, compatibility, performance, examples]
    
    name: Build Status
    
    steps:
    - name: All checks passed
      run: echo "All CI checks have passed successfully!"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "Some CI checks have failed. Please review the failed jobs above."
        exit 1